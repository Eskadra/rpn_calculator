<?php
/**
 * rpn - reverse polish notation
 *
 * @author Fedor Vyrzhykovsky
 */

namespace app\components;
use yii\base\Widget;

class rpn_calculator extends Widget{

    public $message;

    public function init(){
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function run(){
        parent::run(); // TODO: Change the autogenerated stub
        $errStr =  'Error: string is NULL';
        $errorMessage = '[ ' . $errStr . ' ]';
        if ($this->message === null) {
            return $this->message = $errorMessage;
        } else {
            return $nStr = $this->isWriteRight($this->message); //rpnCalc но сперва проверим на правильность написания используя isCopyPast()
        }
    }

    public function isWriteRight($message){
        $pattern = "/[÷×]/"; //we are only interested in these values || ÷ ×
        if( preg_match($pattern, $message) ){
            return $this->isCopyPast($message);
        }else{
            return $this->rpnCalc($message);
        }
    }

    public function isCopyPast($message)
    {
        $notAcceptableOperators = array("+", "−", "÷", "×");
        $key = explode(' ', $message);
        $convertedRes = '';
        foreach ($key as $value)
            if (is_numeric($value)) {
                $numbers[] = $value;
            }elseif (in_array($value, $notAcceptableOperators)) {
                $fNum = array_pop($numbers);
                $sNum = array_pop($numbers);
                switch ($value) {
                    case '+':
                        $value = '+';
                        $convertedRes = $sNum . ' ' . $fNum . ' ' . $value;
                        break;
                    case '−':
                        $value = '-';
                        $convertedRes = $sNum . ' ' . $fNum . ' ' . $value;
                        break;
                    case '÷':
                        $value = '/';
                        $convertedRes = $sNum . ' ' . $fNum . ' ' . $value;
                        break;
                    case '×':
                        $value = '*';
                        $convertedRes = $sNum . ' ' . $fNum . ' ' . $value;
                        break;
                }
                array_push($numbers, $convertedRes);
            }

        $xyz = iconv_strlen ($message);
        $zyx = iconv_strlen($convertedRes);

        if ($xyz===$zyx){
            return  $this->rpnCalc($convertedRes);
        }else{
            return 'The algorithm did not work correctly, kindly bring your operators to a normal view!';
        }
    }

    public function rpnCalc($message){
        $acceptableOperators = array("+", "-", "/", "*");
        $calcRes='';
        $key = explode(' ', $message);
        if (count($key) == 1){
            return 'More than 2 characters required.';
        } elseif ( !in_array(end($key), $acceptableOperators) ){
            return 'The last character must be an operator.';
        }
        foreach ($key as $value) {
            if (is_numeric($value)) {
                $numbers[] = $value;
            } elseif (in_array($value, $acceptableOperators)) {
                $fNum = array_pop($numbers);
                $sNum = array_pop($numbers);
                switch ($value) {
                    case '+':
                        $calcRes = $sNum + $fNum;
                        break;
                    case '-':
                        $calcRes = $sNum - $fNum;
                        break;
                    case '/':
                        $calcRes = $sNum / $fNum;
                        break;
                    case '*':
                        $calcRes = $sNum * $fNum;
                        break;
                }
                array_push($numbers, $calcRes);
            }
        }
        return $calcRes;
    }
}